{"version":3,"file":"Operation.js","sourceRoot":"","sources":["../src/Operation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AACjD,OAAO,EAAE,sBAAsB,EAAQ,aAAa,EAAe,MAAM,mBAAmB,CAAC;AAC7F,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAW1C,MAAM,CAAC,OAAO,OAAO,SAAS;IAC5B,oFAAoF;IACpF,MAAM,CAAC,eAAe,CAAC,WAAwB;QAC7C,IAAI,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAChD,IAAI,IAAmC,CAAC;QACxC,IACE,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EACpD;YACA,IAAI,GAAG,UAAU,CAAC,KAAK,EAAuB,CAAC;SAChD;QACD,MAAM,CAAC,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,CAAC,GAAG,UAAU,CAAC;QAErF,OAAO,IAAI,SAAS,CAClB,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,EACnE,IAAI,CACL,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,mBAAmB,CACxB,cAA8B,EAC9B,IAAuB;QAEvB,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAEtD,OAAO,SAAS,CAAC,UAAU,EAAE,CAAC;IAChC,CAAC;IAYD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,YACE,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAkB,EACnF,IAAwB;QAExB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,QAAQ;QACN,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;QAEjF,OAAO;YACL,cAAc;YACd,WAAW;YACX,kBAAkB;YAClB,cAAc;SACf,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,IAAwB;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,UAAU;QACR,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;QAEjF,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,cAAc,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,OAAO,EAAE,kDAAkD,EAAE,CAAC,CAAC;SACnH;QACD,OAAO,iBAAiB,CACtB,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,EACnE,IAAI,CAAC,IAAI,CACV,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { createOperationId } from './operations';\nimport { CharacteristicProperty, UUID, OperationType, OperationId } from './Bluetooth.types';\nimport { DELIMINATOR } from './ExpoBluetooth';\nimport { BluetoothError } from './errors';\n\ntype PossibleOperation = OperationType | CharacteristicProperty;\n\nexport type OperationUUIDs = {\n  peripheralUUID?: UUID;\n  serviceUUID?: UUID;\n  characteristicUUID?: UUID;\n  descriptorUUID?: UUID;\n};\n\nexport default class Operation {\n  // Return a Operation from a operationId ex: read|some_peripheral_id|some_service_id\n  static fromOperationId(operationId: OperationId): Operation {\n    let components = operationId.split(DELIMINATOR);\n    let type: PossibleOperation | undefined;\n    if (\n      Object.values(CharacteristicProperty).includes(components[0]) ||\n      Object.values(OperationType).includes(components[0])\n    ) {\n      type = components.shift() as PossibleOperation;\n    }\n    const [peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID] = components;\n\n    return new Operation(\n      { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID },\n      type\n    );\n  }\n\n  static generateOperationId(\n    operationUUIDs: OperationUUIDs,\n    type: PossibleOperation\n  ): OperationId {\n    const operation = new Operation(operationUUIDs, type);\n\n    return operation.generateId();\n  }\n  \n  peripheralUUID?: string;\n\n  serviceUUID?: string;\n\n  characteristicUUID?: string;\n\n  descriptorUUID?: string;\n\n  _type?: PossibleOperation;\n\n  get type(): PossibleOperation | undefined {\n    return this._type;\n  }\n\n  constructor(\n    { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID }: OperationUUIDs,\n    type?: PossibleOperation\n  ) {\n    this.peripheralUUID = peripheralUUID;\n    this.serviceUUID = serviceUUID;\n    this.characteristicUUID = characteristicUUID;\n    this.descriptorUUID = descriptorUUID;\n    this._type = type;\n  }\n\n  getUUIDs(): OperationUUIDs {\n    const { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID } = this;\n\n    return {\n      peripheralUUID,\n      serviceUUID,\n      characteristicUUID,\n      descriptorUUID,\n    };\n  }\n\n  setType(type?: PossibleOperation) {\n    this._type = type;\n  }\n\n  generateId(): OperationId {\n    const { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID } = this;\n\n    if (this.type === undefined) {\n      throw new BluetoothError({ code: 'ERR_BLE_ID_GEN', message: 'Operation.generateId(): type cannot be undefined' });\n    }\n    return createOperationId(\n      { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID },\n      this.type\n    );\n  }\n}\n"]}