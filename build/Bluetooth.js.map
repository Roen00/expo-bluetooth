{"version":3,"file":"Bluetooth.js","sourceRoot":"","sources":["../src/Bluetooth.ts"],"names":[],"mappings":"AAEA,OAAO,EAKL,sBAAsB,GAcvB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAE,SAAS,EAAE,qBAAqB,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAC7G,OAAO,aAAa,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACrE,OAAO,EACL,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EAChB,WAAW,EACX,sBAAsB,EACtB,uBAAuB,EACvB,uBAAuB,EACvB,mBAAmB,GACpB,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAE,yBAAyB,EAAE,MAAM,mBAAmB,CAAC;AAChG,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAGlD;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,eAA4B,EAAE,EAC9B,QAA0C;IAE1C,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC5C,SAAS,CAAC,QAAQ,EAAE,4DAA4D,CAAC,CAAC;IAElF,MAAM,EAAE,mBAAmB,GAAG,EAAE,EAAE,GAAG,eAAe,EAAE,GAAG,YAAY,CAAC;IAEtE,MAAM,aAAa,CAAC,kBAAkB,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,mBAAmB,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;IAE3F,MAAM,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,6BAA6B,EAAE,KAAK,CAAC,EAAE;QAClF,SAAS,CAAC,QAAQ,EAAE,4DAA4D,CAAC,CAAC;QAClF,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC,6BAA6B,CAAC,CAAC;SACvE;QACD,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,IAAI,EAAE;QAChB,IAAI,YAAY,EAAE;YAChB,YAAY,CAAC,MAAM,EAAE,CAAC;YACtB,MAAM,iBAAiB,EAAE,CAAC;SAC3B;IACH,CAAC,CAAC;AACJ,CAAC;AAED,6DAA6D;AAC7D,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,OAA8B;IAC5D,qBAAqB,CAAC,WAAW,CAAC,CAAC;IACnC,MAAM,MAAM,EAAE,CAAC;IACf,MAAM,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB;IACrC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;IAC3C,uBAAuB;IACvB,MAAM,mBAAmB,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;IAChE,MAAM,aAAa,CAAC,iBAAiB,EAAE,CAAC;AAC1C,CAAC;AAED,iDAAiD;AACjD,MAAM,UAAU,cAAc,CAAC,QAAgC;IAC7D,OAAO,gBAAgB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,QAA8B;IAC3E,MAAM,OAAO,GAAG,MAAM,eAAe,EAAE,CAAC;IACxC,6DAA6D;IAC7D,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,OAAO,gBAAgB,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,EAAE,OAAO,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,CAAC;AACxG,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,cAAoB,EACpB,EAAE,OAAO,EAAE,YAAY,EAAqB,EAC5C,UAAsC,EAAE;IAExC,qBAAqB,CAAC,wBAAwB,CAAC,CAAC;IAChD,aAAa,CAAC,cAAc,CAAC,CAAC;IAE9B,IAAI,YAAY,EAAE;QAChB,eAAe,CAAC,MAAM,CAAC,uBAAuB,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;KAC/E;IAED,IAAI,UAA8B,CAAC;IAEnC,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,IAAI,OAAO,EAAE;YACX,UAAU,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC3B,eAAe,CAAC,cAAc,CAAC,CAAC;gBAChC,MAAM,CACJ,IAAI,cAAc,CAAC;oBACjB,OAAO,EAAE,oCAAoC,cAAc,cACzD,OACF,IAAI;oBACJ,IAAI,EAAE,iBAAiB;iBACxB,CAAC,CACH,CAAC;YACJ,CAAC,EAAE,OAAO,CAAC,CAAC;SACb;QAED,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,sBAAsB,CAAC,cAAc,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;YACzF,YAAY,CAAC,UAAU,CAAC,CAAC;YACzB,OAAO,CAAC,MAAM,CAAC,CAAC;YAChB,OAAO;SACR;QAAC,OAAO,KAAK,EAAE;YACd,YAAY,CAAC,UAAU,CAAC,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC,CAAC;YACd,OAAO;SACR;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,uDAAuD;AACvD,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,cAAoB;IACxD,qBAAqB,CAAC,2BAA2B,CAAC,CAAC;IACnD,aAAa,CAAC,cAAc,CAAC,CAAC;IAC9B,OAAO,MAAM,aAAa,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC;AACvE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,EACxC,cAAc,EACd,WAAW,EACX,kBAAkB,EAClB,cAAc,GACV;IACJ,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IAE7C,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,aAAa,CAAC,mBAAmB,CAAC;QAC7D,cAAc;QACd,WAAW;QACX,kBAAkB;QAClB,cAAc;QACd,wBAAwB,EAAE,sBAAsB,CAAC,IAAI;KACtD,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC,KAAK,CAAC;AAC1B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,EACzC,cAAc,EACd,WAAW,EACX,kBAAkB,EAClB,cAAc,EACd,IAAI,GACA;IACJ,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;IAE9C,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,aAAa,CAAC,oBAAoB,CAAC;QAC9D,cAAc;QACd,WAAW;QACX,kBAAkB;QAClB,cAAc;QACd,IAAI;QACJ,wBAAwB,EAAE,sBAAsB,CAAC,KAAK;KACvD,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACpB,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAAC,EACjD,cAAc,EACd,WAAW,EACX,kBAAkB,EAClB,YAAY,GACR;IACJ,qBAAqB,CAAC,8BAA8B,CAAC,CAAC;IAEtD,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,aAAa,CAAC,4BAA4B,CAAC;QAC1E,cAAc;QACd,WAAW;QACX,kBAAkB;QAClB,YAAY;KACb,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,OAAkC;IAC9E,qBAAqB,CAAC,yBAAyB,CAAC,CAAC;IAEjD,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,aAAa,CAAC,uBAAuB,CAAC;QACrE,GAAG,OAAO;QACV,wBAAwB,EAAE,sBAAsB,CAAC,IAAI;KACtD,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC,KAAK,CAAC;AAC9B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,OAAmC,EAAE,2BAAmD,sBAAsB,CAAC,KAAK;IACjK,qBAAqB,CAAC,0BAA0B,CAAC,CAAC;IAElD,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,aAAa,CAAC,wBAAwB,CAAC;QACtE,GAAG,OAAO;QACV,wBAAwB;KACzB,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,iCAAiC;AACjC,MAAM,CAAC,KAAK,UAAU,uCAAuC,CAAC,OAAmC;IAC/F,OAAO,MAAM,wBAAwB,CAAC,OAAO,EAAE,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;AAC9F,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,cAAoB;IACtD,qBAAqB,CAAC,eAAe,CAAC,CAAC;IACvC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC9B,OAAO,MAAM,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IAC7C,OAAO,MAAM,aAAa,CAAC,mBAAmB,EAAE,CAAC;AACnD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,sBAA8B,EAAE;IAEhC,qBAAqB,CAAC,8BAA8B,CAAC,CAAC;IACtD,OAAO,MAAM,aAAa,CAAC,4BAA4B,CAAC,mBAAmB,CAAC,CAAC;AAC/E,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe;IACnC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACzC,OAAO,MAAM,aAAa,CAAC,eAAe,EAAE,CAAC;AAC/C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,EAAE,cAAc,EAAE;IACzD,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC5C,OAAO,MAAM,aAAa,CAAC,kBAAkB,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EAAE,cAAc,EAAE,WAAW,EAAE;IACnE,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACzC,OAAO,MAAM,aAAa,CAAC,eAAe,CAAC,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,EAC3C,cAAc,EACd,WAAW,EACX,kBAAkB,GACnB;IACC,qBAAqB,CAAC,wBAAwB,CAAC,CAAC;IAChD,OAAO,MAAM,aAAa,CAAC,sBAAsB,CAAC;QAChD,cAAc;QACd,WAAW;QACX,kBAAkB;KACnB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,EACvC,cAAc,EACd,WAAW,EACX,kBAAkB,EAClB,cAAc,GACf;IACC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC5C,OAAO,MAAM,aAAa,CAAC,kBAAkB,CAAC;QAC5C,cAAc;QACd,WAAW;QACX,kBAAkB;QAClB,cAAc;KACf,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe;IACnC,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,eAAe,EAAE,CAAC;IAC/C,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kCAAkC,CAAC,OAIxD;IACC,qBAAqB,CAAC,oCAAoC,CAAC,CAAC;IAC5D,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxD,OAAO,MAAM,aAAa,CAAC,kCAAkC,CAAC;QAC5D,GAAG,SAAS,CAAC,QAAQ,EAAE;QACvB,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;KAC3D,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uCAAuC,CAAC,OAG7D;IACC,qBAAqB,CAAC,yCAAyC,CAAC,CAAC;IACjE,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxD,OAAO,MAAM,aAAa,CAAC,uCAAuC,CAAC;QACjE,GAAG,SAAS,CAAC,QAAQ,EAAE;QACvB,YAAY,EAAE,OAAO,CAAC,YAAY;KACnC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sCAAsC,CAAC,OAI5D;IACC,qBAAqB,CAAC,wCAAwC,CAAC,CAAC;IAChE,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxD,OAAO,MAAM,aAAa,CAAC,sCAAsC,CAAC;QAChE,GAAG,SAAS,CAAC,QAAQ,EAAE;QACvB,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;KAC3D,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yCAAyC,CAAC,OAI/D;IACC,qBAAqB,CAAC,2CAA2C,CAAC,CAAC;IACnE,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACxD,OAAO,MAAM,aAAa,CAAC,yCAAyC,CAAC;QACnE,GAAG,SAAS,CAAC,QAAQ,EAAE;QACvB,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;KAC3D,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,EAAE,EAAE,EAAE,EACN,iBAA0B,KAAK;IAE/B,MAAM,YAAY,GAAG,kBAAkB,CAAC,EAAE,CAAC,CAAC;IAC5C,MAAM,UAAU,GAAG,cAAc,EAAE,CAAC,YAAY,CAAC,CAAC;IAClD,IAAI,CAAC,UAAU,EAAE;QACf,MAAM,IAAI,cAAc,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,mBAAmB,GAAG,YAAY,EAAC,CAAC,CAAC;KACnG;IAED,IAAI,UAAU,CAAC,KAAK,KAAK,WAAW,EAAE;QACpC,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,mBAAmB,GAAG,MAAM,YAAY,CAAC,YAAY,EAAE;gBAC3D,YAAY,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE;oBACzB,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,GAAG,KAAK,CAAC,CAAC;gBACzD,CAAC;aACF,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YACjD,OAAO,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;SACvD;QACD,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;QACnE,mFAAmF;KACpF;SAAM,IAAI,UAAU,CAAC,KAAK,KAAK,WAAW,EAAE;QAC3C,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;QACrE,MAAM,6BAA6B,CAAC,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;KAC3D;IACD,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;IAEnD,oDAAoD;IACpD,OAAO,cAAc,EAAE,CAAC,YAAY,CAAC,CAAC;AACxC,CAAC;AAED,mBAAmB;AAEnB,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,EAAE,EAAE,EAAkB;IACxE,MAAM,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACzC,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,gBAAgB;QAChB,MAAM,IAAI,cAAc,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,8BAA8B,EAAC,CAAC,CAAC;KAC/F;SAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAClC,oBAAoB;QACpB,MAAM,WAAW,GAAG,MAAM,yCAAyC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,WAAW,CAAC;KACpB;SAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAClC,aAAa;QACb,MAAM,eAAe,GAAG,MAAM,sCAAsC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7E,OAAO,MAAM,OAAO,CAAC,GAAG,CACtB,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC,6BAA6B,CAAC,cAAc,CAAC,CAAC,CACrF,CAAC;KACH;SAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAClC,gBAAgB;QAChB,MAAM,QAAQ,GAAG,MAAM,kCAAkC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAClE,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAC3F;SAAM;QACL,MAAM,IAAI,cAAc,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,cAAc,EAAE,EAAE,EAAC,CAAC,CAAC;KACnF;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,MAAM;IAC1B,MAAM,iBAAiB,EAAE,CAAC;IAC1B,gBAAgB,EAAE,CAAC;IACnB,MAAM,iBAAiB,EAAE,CAAC;AAC5B,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,GAAG,SAAS;IACxE,MAAM,MAAM,GAAG,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;IAC1C,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,EAAG;QACvC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,OAAO,IAAI,gBAAgB,CAAC,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;KAC/E;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,WAAW,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAsC,EAAE,EAAE;IAClE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IAEzD,IAAI,KAAK,KAAK,MAAM,CAAC,YAAY,EAAE;QACjC,gBAAgB,EAAE,CAAC;QACnB,IAAI,WAAW,EAAE;YACf,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;gBACpC,yBAAyB,CAAC,UAAU,CAAC,CAAC;aACvC;SACF;QACD,uBAAuB,EAAE,CAAC;QAC1B,OAAO;KACR;IAED,QAAQ,KAAK,EAAE;QACb,KAAK,MAAM,CAAC,qBAAqB,CAAC;QAClC,KAAK,MAAM,CAAC,uBAAuB,CAAC;QACpC,KAAK,MAAM,CAAC,6BAA6B,CAAC;QAC1C,KAAK,MAAM,CAAC,4BAA4B;YACtC,sBAAsB,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAC9D,IAAI,UAAU,EAAE;gBACd,mDAAmD;gBACnD,MAAM,GAAG,GAAG,GAAG,KAAK,IAAI,UAAU,CAAC,EAAE,EAAE,CAAC;gBACxC,uBAAuB,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;aAC9D;YACD,uBAAuB,EAAE,CAAC;YAC1B,OAAO;QACT;YACE,sGAAsG;YACxG,OAAO;KACR;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { Subscription } from 'expo-core';\n\nimport {\n  Base64,\n  CancelScanningCallback,\n  Central,\n  CentralManagerOptions,\n  CharacteristicProperty,\n  ConnectionOptions,\n  Characteristic,\n  Descriptor,\n  PeripheralConnectionOption,\n  EventData,\n  Service,\n  Peripheral,\n  RSSI,\n  ScanOptions,\n  StateUpdatedCallback,\n  UUID,\n  WriteCharacteristicOptions,\n  ReadCharacteristicOptions,\n} from './Bluetooth.types';\nimport { AndroidGATTError, BluetoothError, invariant, invariantAvailability, invariantUUID } from './errors';\nimport ExpoBluetooth, { DELIMINATOR, EVENTS } from './ExpoBluetooth';\nimport {\n  _resetAllHandlers,\n  addHandlerForID,\n  addHandlerForKey,\n  addListener,\n  fireMultiEventHandlers,\n  firePeripheralObservers,\n  fireSingleEventHandlers,\n  resetHandlersForKey,\n} from './localEventHandler';\nimport { clearPeripherals, getPeripherals, updateStateWithPeripheral } from './peripheralCache';\nimport Operation from './Operation';\nimport { peripheralIdFromId } from './operations';\n\n\n/**\n * Although strongly discouraged,\n * if `serviceUUIDsToQuery` is `null | undefined` all discovered peripherals will be returned.\n * If the central is already scanning with different\n * `serviceUUIDsToQuery` or `scanSettings`, the provided parameters will replace them.\n */\nexport async function startScanningAsync(\n  scanSettings: ScanOptions = {},\n  callback: (peripheral: Peripheral) => void\n): Promise<CancelScanningCallback> {\n  invariantAvailability('startScanningAsync');\n  invariant(callback, 'startScanningAsync({ ... }, null): callback is not defined');\n\n  const { serviceUUIDsToQuery = [], ...scanningOptions } = scanSettings;\n  \n  await ExpoBluetooth.startScanningAsync([...new Set(serviceUUIDsToQuery)], scanningOptions);\n\n  const subscription = addHandlerForKey(EVENTS.CENTRAL_DISCOVERED_PERIPHERAL, event => {\n    invariant(callback, 'startScanningAsync({ ... }, null): callback is not defined');\n    if (!event) {\n      throw new Error('UNEXPECTED ' + EVENTS.CENTRAL_DISCOVERED_PERIPHERAL);\n    }\n    callback(event.peripheral);\n  });\n\n  return async () => {\n    if (subscription) {\n      subscription.remove();\n      await stopScanningAsync();\n    }\n  };\n}\n\n/** Dangerously rebuild the manager with the given options */ \nexport async function initAsync(options: CentralManagerOptions): Promise<void> {\n  invariantAvailability('initAsync');\n  await _reset();\n  await ExpoBluetooth.initAsync(options);\n}\n\nexport async function stopScanningAsync(): Promise<void> {\n  invariantAvailability('stopScanningAsync');\n  // Remove all callbacks\n  await resetHandlersForKey(EVENTS.CENTRAL_DISCOVERED_PERIPHERAL);\n  await ExpoBluetooth.stopScanningAsync();\n}\n\n// Avoiding using \"start\" in passive method names\nexport function observeUpdates(callback: (updates: any) => void): Subscription {\n  return addHandlerForKey('everything', callback);\n}\n\nexport async function observeCentralStateAsync(callback: StateUpdatedCallback): Promise<Subscription> {\n  const central = await getCentralAsync();\n  // Make the callback async so the subscription returns first.\n  setTimeout(() => callback(central.state));\n  return addHandlerForKey(EVENTS.CENTRAL_STATE_CHANGED, ({ central = {} }) => callback(central.state) );\n}\n\nexport async function connectAsync(\n  peripheralUUID: UUID,\n  { timeout, onDisconnect }: ConnectionOptions,\n  options: PeripheralConnectionOption = {}\n): Promise<Peripheral> {\n  invariantAvailability('connectPeripheralAsync');\n  invariantUUID(peripheralUUID);\n\n  if (onDisconnect) {\n    addHandlerForID(EVENTS.PERIPHERAL_DISCONNECTED, peripheralUUID, onDisconnect);\n  }\n\n  let timeoutTag: number | undefined;\n\n  return new Promise(async (resolve, reject) => {\n    if (timeout) {\n      timeoutTag = setTimeout(() => {\n        disconnectAsync(peripheralUUID);\n        reject(\n          new BluetoothError({\n            message: `Failed to connect to peripheral: ${peripheralUUID} in under: ${\n              timeout\n            }ms`,\n            code: 'ERR_BLE_TIMEOUT',\n          })\n        );\n      }, timeout);\n    }\n    \n    try {\n      const result = await ExpoBluetooth.connectPeripheralAsync(peripheralUUID, options || {});\n      clearTimeout(timeoutTag);\n      resolve(result);\n      return;\n    } catch (error) {\n      clearTimeout(timeoutTag);\n      reject(error);\n      return;\n    }\n  });\n}\n\n/** This method will also cancel pending connections */\nexport async function disconnectAsync(peripheralUUID: UUID): Promise<any> {\n  invariantAvailability('disconnectPeripheralAsync');\n  invariantUUID(peripheralUUID);\n  return await ExpoBluetooth.disconnectPeripheralAsync(peripheralUUID);\n}\n\nexport async function readDescriptorAsync({\n  peripheralUUID,\n  serviceUUID,\n  characteristicUUID,\n  descriptorUUID,\n}: any): Promise<Base64 | null> {\n  invariantAvailability('readDescriptorAsync');\n\n  const { descriptor } = await ExpoBluetooth.readDescriptorAsync({\n    peripheralUUID,\n    serviceUUID,\n    characteristicUUID,\n    descriptorUUID,\n    characteristicProperties: CharacteristicProperty.Read,\n  });\n\n  return descriptor.value;\n}\n\nexport async function writeDescriptorAsync({\n  peripheralUUID,\n  serviceUUID,\n  characteristicUUID,\n  descriptorUUID,\n  data,\n}: any): Promise<Descriptor> {\n  invariantAvailability('writeDescriptorAsync');\n\n  const { descriptor } = await ExpoBluetooth.writeDescriptorAsync({\n    peripheralUUID,\n    serviceUUID,\n    characteristicUUID,\n    descriptorUUID,\n    data,\n    characteristicProperties: CharacteristicProperty.Write,\n  });\n\n  return descriptor;\n}\nexport async function setNotifyCharacteristicAsync({\n  peripheralUUID,\n  serviceUUID,\n  characteristicUUID,\n  shouldNotify,\n}: any): Promise<Characteristic> {\n  invariantAvailability('setNotifyCharacteristicAsync');\n\n  const { characteristic } = await ExpoBluetooth.setNotifyCharacteristicAsync({\n    peripheralUUID,\n    serviceUUID,\n    characteristicUUID,\n    shouldNotify,\n  });\n\n  return characteristic;\n}\n\nexport async function readCharacteristicAsync(options: ReadCharacteristicOptions): Promise<Base64 | null> {\n  invariantAvailability('readCharacteristicAsync');\n\n  const { characteristic } = await ExpoBluetooth.readCharacteristicAsync({\n    ...options,\n    characteristicProperties: CharacteristicProperty.Read,\n  });\n\n  return characteristic.value;\n}\n\nexport async function writeCharacteristicAsync(options: WriteCharacteristicOptions, characteristicProperties: CharacteristicProperty = CharacteristicProperty.Write): Promise<Characteristic> {\n  invariantAvailability('writeCharacteristicAsync');\n\n  const { characteristic } = await ExpoBluetooth.writeCharacteristicAsync({\n    ...options,\n    characteristicProperties,\n  });\n\n  return characteristic;\n}\n\n// This is ~3x faster on Android.\nexport async function writeCharacteristicWithoutResponseAsync(options: WriteCharacteristicOptions): Promise<Characteristic> {\n  return await writeCharacteristicAsync(options, CharacteristicProperty.WriteWithoutResponse);\n}\n\nexport async function readRSSIAsync(peripheralUUID: UUID): Promise<RSSI> {\n  invariantAvailability('readRSSIAsync');\n  invariantUUID(peripheralUUID);\n  return await ExpoBluetooth.readRSSIAsync(peripheralUUID);\n}\n\nexport async function getPeripheralsAsync(): Promise<Peripheral[]> {\n  invariantAvailability('getPeripheralsAsync');\n  return await ExpoBluetooth.getPeripheralsAsync();\n}\n\nexport async function getConnectedPeripheralsAsync(\n  serviceUUIDsToQuery: UUID[] = []\n): Promise<Peripheral[]> {\n  invariantAvailability('getConnectedPeripheralsAsync');\n  return await ExpoBluetooth.getConnectedPeripheralsAsync(serviceUUIDsToQuery);\n}\n\nexport async function getCentralAsync(): Promise<Central> {\n  invariantAvailability('getCentralAsync');\n  return await ExpoBluetooth.getCentralAsync();\n}\n\nexport async function getPeripheralAsync({ peripheralUUID }): Promise<Peripheral> {\n  invariantAvailability('getPeripheralAsync');\n  return await ExpoBluetooth.getPeripheralAsync({ peripheralUUID });\n}\n\nexport async function getServiceAsync({ peripheralUUID, serviceUUID }): Promise<Service> {\n  invariantAvailability('getServiceAsync');\n  return await ExpoBluetooth.getServiceAsync({ peripheralUUID, serviceUUID });\n}\n\nexport async function getCharacteristicAsync({\n  peripheralUUID,\n  serviceUUID,\n  characteristicUUID,\n}): Promise<Characteristic> {\n  invariantAvailability('getCharacteristicAsync');\n  return await ExpoBluetooth.getCharacteristicAsync({\n    peripheralUUID,\n    serviceUUID,\n    characteristicUUID,\n  });\n}\n\nexport async function getDescriptorAsync({\n  peripheralUUID,\n  serviceUUID,\n  characteristicUUID,\n  descriptorUUID,\n}): Promise<Descriptor> {\n  invariantAvailability('getDescriptorAsync');\n  return await ExpoBluetooth.getDescriptorAsync({\n    peripheralUUID,\n    serviceUUID,\n    characteristicUUID,\n    descriptorUUID,\n  });\n}\n\nexport async function isScanningAsync(): Promise<boolean> {\n  const { isScanning } = await getCentralAsync();\n  return isScanning;\n}\n\nexport async function discoverServicesForPeripheralAsync(options: {\n  id: string;\n  serviceUUIDs?: UUID[];\n  characteristicProperties?: CharacteristicProperty;\n}): Promise<Service[]> {\n  invariantAvailability('discoverServicesForPeripheralAsync');\n  const operation = Operation.fromOperationId(options.id);\n  return await ExpoBluetooth.discoverServicesForPeripheralAsync({\n    ...operation.getUUIDs(),\n    serviceUUIDs: options.serviceUUIDs,\n    characteristicProperties: options.characteristicProperties,\n  });\n}\n\nexport async function discoverIncludedServicesForServiceAsync(options: {\n  id: string;\n  serviceUUIDs?: UUID[];\n}): Promise<Service[]> {\n  invariantAvailability('discoverIncludedServicesForServiceAsync');\n  const operation = Operation.fromOperationId(options.id);\n  return await ExpoBluetooth.discoverIncludedServicesForServiceAsync({\n    ...operation.getUUIDs(),\n    serviceUUIDs: options.serviceUUIDs,\n  });\n}\n\nexport async function discoverCharacteristicsForServiceAsync(options: {\n  id: string;\n  serviceUUIDs?: UUID[];\n  characteristicProperties?: CharacteristicProperty;\n}): Promise<Characteristic[]> {\n  invariantAvailability('discoverCharacteristicsForServiceAsync');\n  const operation = Operation.fromOperationId(options.id);\n  return await ExpoBluetooth.discoverCharacteristicsForServiceAsync({\n    ...operation.getUUIDs(),\n    serviceUUIDs: options.serviceUUIDs,\n    characteristicProperties: options.characteristicProperties,\n  });\n}\n\nexport async function discoverDescriptorsForCharacteristicAsync(options: {\n  id: string;\n  serviceUUIDs?: UUID[];\n  characteristicProperties?: CharacteristicProperty;\n}): Promise<Descriptor[]> {\n  invariantAvailability('discoverDescriptorsForCharacteristicAsync');\n  const operation = Operation.fromOperationId(options.id);\n  return await ExpoBluetooth.discoverDescriptorsForCharacteristicAsync({\n    ...operation.getUUIDs(),\n    serviceUUIDs: options.serviceUUIDs,\n    characteristicProperties: options.characteristicProperties,\n  });\n}\n\nexport async function loadPeripheralAsync(\n  { id },\n  skipConnecting: boolean = false\n): Promise<Peripheral> {\n  const peripheralId = peripheralIdFromId(id);\n  const peripheral = getPeripherals()[peripheralId];\n  if (!peripheral) {\n    throw new BluetoothError({ code: 'ERR_BLE_LOADING', message: 'Not a peripheral ' + peripheralId});\n  }\n\n  if (peripheral.state !== 'connected') {\n    if (!skipConnecting) {\n      const connectedPeripheral = await connectAsync(peripheralId, {\n        onDisconnect: (...props) => {\n          console.log('On Disconnect public callback', ...props);\n        },\n      });\n      console.log('loadPeripheralAsync(): connected!');\n      return loadPeripheralAsync(connectedPeripheral, true);\n    }\n    console.log('loadPeripheralAsync(): NEVER CALL', peripheral.state);\n    // This should never be called because in theory connectAsync would throw an error.\n  } else if (peripheral.state === 'connected') {\n    console.log('loadPeripheralAsync(): _loadChildrenRecursivelyAsync!');\n    await _loadChildrenRecursivelyAsync({ id: peripheralId });\n  }\n  console.log('loadPeripheralAsync(): fully loaded');\n\n  // In case any updates occured during this function.\n  return getPeripherals()[peripheralId];\n}\n\n// Internal Methods\n\nexport async function _loadChildrenRecursivelyAsync({ id }: { id: string }): Promise<any[]> {\n  const components = id.split(DELIMINATOR);\n  if (components.length === 4) {\n    // Descriptor ID\n    throw new BluetoothError({ code: `ERR_BLE_LOADING`, message: 'Descriptors have no children'});\n  } else if (components.length === 3) {\n    // Characteristic ID\n    const descriptors = await discoverDescriptorsForCharacteristicAsync({ id });\n    return descriptors;\n  } else if (components.length === 2) {\n    // Service ID\n    const characteristics = await discoverCharacteristicsForServiceAsync({ id });\n    return await Promise.all(\n      characteristics.map(characteristic => _loadChildrenRecursivelyAsync(characteristic))\n    );\n  } else if (components.length === 1) {\n    // Peripheral ID\n    const services = await discoverServicesForPeripheralAsync({ id });\n    return await Promise.all(services.map(service => _loadChildrenRecursivelyAsync(service)));\n  } else {\n    throw new BluetoothError({ code: `ERR_BLE_LOADING`, message: `Unknown ID ${id}`});\n  }\n}\n\nexport async function _reset(): Promise<void> {\n  await stopScanningAsync();\n  clearPeripherals();\n  await _resetAllHandlers();\n}\n\nexport function _getGATTStatusError(code, invokedMethod, stack = undefined) {\n  const nStack = stack || new Error().stack;\n  if (code.indexOf('ERR_BLE_GATT:') > -1 ) {\n    const gattStatusCode = code.split(':')[1];\n    return new AndroidGATTError({ gattStatusCode, stack: nStack, invokedMethod });\n  } \n  return null;\n}\n\naddListener(({ data, event }: { data: EventData; event: string }) => {\n  const { peripheral, peripherals, central, error } = data;\n\n  if (event === EVENTS.UPDATE_STATE) {\n    clearPeripherals();\n    if (peripherals) {\n      for (const peripheral of peripherals) {\n        updateStateWithPeripheral(peripheral);\n      }\n    }\n    firePeripheralObservers();\n    return;\n  }\n  \n  switch (event) {\n    case EVENTS.CENTRAL_STATE_CHANGED:\n    case EVENTS.PERIPHERAL_DISCONNECTED:\n    case EVENTS.CENTRAL_DISCOVERED_PERIPHERAL:\n    case EVENTS.SYSTEM_ENABLED_STATE_CHANGED:\n      fireMultiEventHandlers(event, { peripheral, central, error });\n      if (peripheral) {\n        // Send specific events for things like disconnect.\n        const uid = `${event}_${peripheral.id}`;\n        fireSingleEventHandlers(uid, { peripheral, central, error });\n      }\n      firePeripheralObservers();\n      return;\n    default:\n      // throw new BluetoothError({ message: 'Unhandled event: ' + event, code: 'ERR_BLE_UNHANDLED_EVENT'});\n    return;\n  }\n});\n"]}