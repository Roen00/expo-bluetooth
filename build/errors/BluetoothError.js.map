{"version":3,"file":"BluetoothError.js","sourceRoot":"","sources":["../../src/errors/BluetoothError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AACzC,OAAO,EAAE,MAAM,IAAI,CAAC;AAGpB,SAAS,WAAW,CAAC,GAAG;IACtB,OAAO,GAAG,CAAC,OAAO,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC;AAChE,CAAC;AAED,SAAS,QAAQ,CAAC,GAAG;IACnB,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClD,OAAO;QACL,GAAG;QACH,MAAM,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC;KACzB,CAAC;AACJ,CAAC;AAED,SAAS,4BAA4B,CAAC,aAAa;IACjD,MAAM,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACrE,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KACnC;IAED,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAChB,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACvB,CAAC;AACJ,CAAC;AAED,SAAS,yBAAyB,CAAC,aAAa;IAC9C,MAAM,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACrE,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC;AAED,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,UAAU;IACpD,GAAG;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;SACtC,CAAC;IACJ,CAAC;IAED,YAAY,EAAE,IAAI,GAAG,gBAAgB,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAA0B;QACnF,KAAK,CAAC,IAAI,IAAI,iBAAiB,EAAE,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,KAAK,EAAE;YACT,+BAA+B;YAC/B,MAAM,eAAe,GAAG,KAAK;iBAC1B,KAAK,CAAC,IAAI,CAAC;iBACX,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;iBACX,GAAG,CAAC,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE;gBAC5B,qDAAqD;gBACrD,OAAO,GAAG,KAAK,KAAK,yBAAyB,CAAC,aAAa,CAAC,EAAE,CAAC;YACjE,CAAC,CAAC,CAAC;YACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;SAC9C;IACH,CAAC;CACF","sourcesContent":["import { CodedError } from 'expo-errors';\nimport qs from 'qs';\nimport { NativeError } from '../Bluetooth.types';\n\nfunction _removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction splitURL(url) {\n  const [uri, params] = _removePort(url).split('?');\n  return {\n    uri,\n    params: qs.parse(params),\n  };\n}\n\nfunction getFullObjectFromSingleTrace(encodedString) {\n  const info = encodedString.split('@').map(value => decodeURI(value));\n  if (info.length === 1) {\n    return { uri: splitURL(info[0]) };\n  }\n\n  return {\n    command: info[0],\n    uri: splitURL(info[1]),\n  };\n}\n\nfunction getCommandFromSingleTrace(encodedString) {\n  const info = encodedString.split('@').map(value => decodeURI(value));\n  return info[0];\n}\n\nexport default class BluetoothError extends CodedError implements NativeError {\n  log() {\n    console.log(JSON.stringify(this.toJSON(), null, 2));\n  }\n\n  toJSON(): { [key: string]: any } {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      stack: JSON.parse(this.stack || '{}'),\n    };\n  }\n\n  constructor({ name = 'expo-bluetooth', message, stack, code }: { [key: string]: any }) {\n    super(code || 'ERR_BLE_UNKNOWN', message);\n    this.name = name;\n    if (stack) {\n      // Just use the first few lines\n      const stackComponents = stack\n        .split('\\n')\n        .slice(0, 5)\n        .map((encodedString, index) => {\n          // return getFullObjectFromSingleTrace(encodedString)\n          return `${index}: ${getCommandFromSingleTrace(encodedString)}`;\n        });\n      this.stack = JSON.stringify(stackComponents);\n    }\n  }\n}\n"]}