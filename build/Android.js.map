{"version":3,"file":"Android.js","sourceRoot":"","sources":["../src/Android.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,cAAc,MAAM,yBAAyB,CAAC;AACrD,OAAO,EAAE,qBAAqB,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AACnF,OAAO,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAExD,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,cAAoB,EAAE,GAAQ;IAClE,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACzC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC9B,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI,cAAc,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;KACnF;IACD,OAAO,MAAM,aAAa,CAAC,eAAe,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;AAClE,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,cAAoB;IAClD,qBAAqB,CAAC,WAAW,CAAC,CAAC;IACnC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC9B,OAAO,MAAM,aAAa,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;AACvD,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,cAAoB;IACpD,qBAAqB,CAAC,aAAa,CAAC,CAAC;IACrC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC9B,OAAO,MAAM,aAAa,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;AACzD,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,qBAA8B,IAAI;IAC3E,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;IAC9C,OAAO,MAAM,aAAa,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;AACtE,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,yBAAyB;IAC7C,qBAAqB,CAAC,2BAA2B,CAAC,CAAC;IACnD,OAAO,MAAM,aAAa,CAAC,yBAAyB,EAAE,CAAC;AACzD,CAAC;AACD,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,cAAoB,EACpB,kBAA4B;IAE5B,qBAAqB,CAAC,gCAAgC,CAAC,CAAC;IACxD,aAAa,CAAC,cAAc,CAAC,CAAC;IAC9B,OAAO,MAAM,aAAa,CAAC,8BAA8B,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;AAChG,CAAC;AACD,MAAM,UAAU,uBAAuB,CAAC,QAAoC;IAC1E,OAAO,gBAAgB,CAAC,MAAM,CAAC,4BAA6B,EAAE,QAAQ,CAAC,CAAC;AAC1E,CAAC","sourcesContent":["import { Subscription } from 'expo-core';\n\nimport { Central, Peripheral, Priority, UUID, MTU } from './Bluetooth.types';\nimport { addHandlerForKey } from './localEventHandler';\nimport BluetoothError from './errors/BluetoothError';\nimport { invariantAvailability, invariantUUID } from './errors/BluetoothInvariant';\nimport ExpoBluetooth, { EVENTS } from './ExpoBluetooth';\n\nexport async function requestMTUAsync(peripheralUUID: UUID, MTU: MTU): Promise<MTU> {\n  invariantAvailability('requestMTUAsync');\n  invariantUUID(peripheralUUID);\n  if (MTU > 512 || MTU < 0) {\n    throw new BluetoothError({ message: 'Max MTU size is 512', code: 'ERR_BLE_MTU' });\n  }\n  return await ExpoBluetooth.requestMTUAsync(peripheralUUID, MTU);\n}\nexport async function bondAsync(peripheralUUID: UUID): Promise<any> {\n  invariantAvailability('bondAsync');\n  invariantUUID(peripheralUUID);\n  return await ExpoBluetooth.bondAsync(peripheralUUID);\n}\nexport async function unbondAsync(peripheralUUID: UUID): Promise<any> {\n  invariantAvailability('unbondAsync');\n  invariantUUID(peripheralUUID);\n  return await ExpoBluetooth.unbondAsync(peripheralUUID);\n}\nexport async function enableBluetoothAsync(isBluetoothEnabled: boolean = true): Promise<void> {\n  invariantAvailability('enableBluetoothAsync');\n  return await ExpoBluetooth.enableBluetoothAsync(isBluetoothEnabled);\n}\nexport async function getBondedPeripheralsAsync(): Promise<Peripheral[]> {\n  invariantAvailability('getBondedPeripheralsAsync');\n  return await ExpoBluetooth.getBondedPeripheralsAsync();\n}\nexport async function requestConnectionPriorityAsync(\n  peripheralUUID: UUID,\n  connectionPriority: Priority\n): Promise<void> {\n  invariantAvailability('requestConnectionPriorityAsync');\n  invariantUUID(peripheralUUID);\n  return await ExpoBluetooth.requestConnectionPriorityAsync(peripheralUUID, connectionPriority);\n}\nexport function observeBluetoothEnabled(callback: (updates: Central) => void): Subscription {\n  return addHandlerForKey(EVENTS.SYSTEM_ENABLED_STATE_CHANGED!, callback);\n}\n"]}